import java.util.Random;
import java.util.Scanner;

public class TicTacToe {

    private static Scanner scanner;

    public static void main(String[] args) {
        char[][] board = new char[3][3];
        int round = 0; // Keeps track of the number of turns
        String userInput = null;
        String b;

        System.out.println("************\nTic-Tac-Toe! \n************");
        System.out.println();
        System.out.println("Please enter the column (A, B, or C) and then the row (1, 2, or 3) of your move.");
        System.out.println();

        printBoard(board);
        System.out.println();

        // Main game loop: continues until there is a winner or no more empty spots
        while (!checkWin(board) && emptySpots(board)) {
            round++;
            b = takeInput(userInput);
            
            // Ensure the selected spot is empty
            while (checkInput(b, board)) {
                System.out.println("The space entered is already taken.");
                System.out.println();
                b = takeInput(userInput);
            }
            updateBoard(b, board);

            // Check for win or draw
            if (!emptySpots(board) || checkWin(board)) {
                break;
            }
            printBoard(board);
            System.out.println();

            round++;
            aiInput(board);
            System.out.println();

            // Check for win or draw
            if (!emptySpots(board) || checkWin(board)) {
                break;
            }
            printBoard(board);
            System.out.println();
        }

        // Print final board state
        printBoard(board);
        System.out.println();

        // Determine and print the result
        if (!checkWin(board)) {
            System.out.println("It's a draw!");
        } else {
            if (round % 2 == 0) {
                System.out.println("You lose!");
            } else {
                System.out.println("You win!");
            }
        }
    }

    // Print the current state of the board
    public static void printBoard(char[][] board) {
        int count = 0;
        System.out.println("   A  B  C");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                count++;
                if (i == 0 && j == 0) {
                    System.out.print("1  |" + board[i][j]);
                } else if (i == 1 && j == 0) {
                    System.out.print("2  |" + board[i][j]);
                } else if (i == 2 && j == 0) {
                    System.out.print("3  |" + board[i][j]);
                } else {
                    System.out.print("|" + board[i][j]);
                }
                if (count == 3) {
                    System.out.print("|");
                    System.out.println();
                    count = 0;
                }
            }
        }
    }

    // Get valid input from the user
    public static String takeInput(String userInput) {
        scanner = new Scanner(System.in);
        char firstChar = 0, secondChar = 0;

        while (true) {
            System.out.print("Player move (X): ");
            userInput = scanner.nextLine();
            System.out.println();

            try {
                firstChar = userInput.charAt(0);
                secondChar = userInput.charAt(1);
            } catch (StringIndexOutOfBoundsException e) {
                secondChar = ' ';
            }

            if ((firstChar == 'A' || firstChar == 'B' || firstChar == 'C') &&
                    (secondChar == '1' || secondChar == '2' || secondChar == '3')) {
                break;
            }
            System.out.println("Invalid Input: Please enter the column and row of your move (Example: A1).");
            System.out.println();
        }
        return userInput;
    }

    // Check if the selected spot is already taken
    public static boolean checkInput(String b, char[][] board) {
        switch (b) {
            case "A1":
                return board[0][0] != 0;
            case "B1":
                return board[0][1] != 0;
            case "C1":
                return board[0][2] != 0;
            case "A2":
                return board[1][0] != 0;
            case "B2":
                return board[1][1] != 0;
            case "C2":
                return board[1][2] != 0;
            case "A3":
                return board[2][0] != 0;
            case "B3":
                return board[2][1] != 0;
            case "C3":
                return board[2][2] != 0;
            default:
                return false;
        }
    }

    // Update the board with the player's move
    private static void updateBoard(String userInput, char[][] board) {
        switch (userInput) {
            case "A1":
                board[0][0] = 'X';
                break;
            case "B1":
                board[0][1] = 'X';
                break;
            case "C1":
                board[0][2] = 'X';
                break;
            case "A2":
                board[1][0] = 'X';
                break;
            case "B2":
                board[1][1] = 'X';
                break;
            case "C2":
                board[1][2] = 'X';
                break;
            case "A3":
                board[2][0] = 'X';
                break;
            case "B3":
                board[2][1] = 'X';
                break;
            case "C3":
                board[2][2] = 'X';
                break;
        }
    }

    // Generate the opponent's move
    private static void aiInput(char[][] board) {
        Random firstNumber = new Random();
        Random secondNumber = new Random();
        int maxnumber = 3;
        String aIRow = null, aIColumn = null;
        int i, j;

        // Generate random numbers for row and column until an empty spot is found
        i = firstNumber.nextInt(maxnumber);
        j = secondNumber.nextInt(maxnumber);

        while (board[i][j] != 0) {
            i = firstNumber.nextInt(maxnumber);
            j = secondNumber.nextInt(maxnumber);
        }

        // Place 'O' in the chosen spot and print the move
        board[i][j] = 'O';

        switch (j) {
            case 0:
                aIColumn = "A";
                break;
            case 1:
                aIColumn = "B";
                break;
            case 2:
                aIColumn = "C";
                break;
        }

        switch (i) {
            case 0:
                aIRow = "1";
                break;
            case 1:
                aIRow = "2";
                break;
            case 2:
                aIRow = "3";
        }

        System.out.println("Computer Move (O): " + aIColumn + aIRow);
    }

    // Check if there are empty spots on the board
    public static boolean emptySpots(char[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 0) {
                    return true;
                }
            }
        }
        return false;
    }

    // Check if there is a winner
    public static boolean checkWin(char[][] board) {
        // Check columns
        for (int c = 0; c < 3; c++) {
            if (board[0][c] == board[1][c] && board[1][c] == board[2][c] && (board[0][c] == 'X' || board[0][c] == 'O')) {
                return true;
            }
        }

        // Check rows
        for (int r = 0; r < 3; r++) {
            if (board[r][0] == board[r][1] && board[r][0] == board[r][2] && (board[r][0] == 'X' || board[r][0] == 'O')) {
                return true;
            }
        }

        // Check diagonals
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && (board[0][0] == 'X' || board[0][0] == 'O')) {
            return true;
        } else if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && (board[2][0] == 'X' || board[2][0] == 'O')) {
            return true;
        } else {
            return false;
        }
    }
}
